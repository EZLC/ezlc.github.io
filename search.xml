<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>可变字符串类和日期相关类</title>
      <link href="/2017/05/28/%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%92%8C%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3%E7%B1%BB/"/>
      <url>/2017/05/28/%E5%8F%AF%E5%8F%98%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%92%8C%E6%97%A5%E6%9C%9F%E7%9B%B8%E5%85%B3%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="可变字符串类（重点）"><a href="#可变字符串类（重点）" class="headerlink" title="可变字符串类（重点）"></a>可变字符串类（重点）</h2><hr><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>由于String类描述的字符串内容是个常量不可改变，当需要在Java代码中描述大量类似的字符串时，只能单独申请和存储，此时会造成内存空间的浪费。</li><li>为了解决上述问题，可以使用java.lang.StringBuilder类和java.lang.StringBuﬀer类来描述字符序 列可以改变的字符串，如：”ab”。</li><li>StringBuﬀer类是从jdk1.0开始存在，属于线程安全的类，因此效率比较低。 </li><li>StringBuilder类是从jdk1.5开始存在，属于非线程安全的类，效率比较高。</li></ul><h3 id="StringBuilder类常用的构造方法"><a href="#StringBuilder类常用的构造方法" class="headerlink" title="StringBuilder类常用的构造方法"></a>StringBuilder类常用的构造方法</h3><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>StringBuilder()</td><td>使用无参方式构造对象，容量为16</td></tr><tr><td>StringBuilder(int capacity)</td><td>根据参数指定的容量来构造对象，容量为参数指定大小</td></tr><tr><td>StringBuilder(String str)</td><td>根据参数指定的字符串来构造对象，容量为：16+字符串长度</td></tr></tbody></table><h3 id="StringBuilder类常用的成员方法"><a href="#StringBuilder类常用的成员方法" class="headerlink" title="StringBuilder类常用的成员方法"></a>StringBuilder类常用的成员方法</h3><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>int capacity()</td><td>用于返回调用对象的容量</td></tr><tr><td>int length()</td><td>用于返回字符串的长度，也就是字符的个数</td></tr><tr><td>StringBuilder insert(int oﬀset, String str)</td><td>插入字符串并返回调用对象的引用，就是自己。</td></tr><tr><td>StringBuilder append(String str)</td><td>追加字符串</td></tr><tr><td>StringBuilder deleteCharAt(int index)</td><td>将当前字符串中下标为index位置的单个字符删除</td></tr><tr><td>StringBuilder delete(int start，int end)</td><td>删除字符串</td></tr><tr><td>StringBuilder replace(int start，int end，String str)</td><td>替换字符串</td></tr><tr><td>StringBuilder reverse()</td><td>字符串反转</td></tr></tbody></table><ul><li>注意<br>作为参数传递的话，方法内部String不会改变其值，StringBuﬀer和StringBuilder会改变其值。</li></ul><h3 id="返回值的设计"><a href="#返回值的设计" class="headerlink" title="返回值的设计"></a>返回值的设计</h3><ul><li>StringBuilder的很多方法的返回值均为StringBuilder类型。这些方法的返回语句均为：return this。</li><li>由此可见，这些方法在对StringBuilder所封装的字符序列进行改变后又返回了该对象的引用。基于这样设计的目的在于可以连续调用。</li></ul><hr><h2 id="Java8之前的日期相关类（熟悉）"><a href="#Java8之前的日期相关类（熟悉）" class="headerlink" title="Java8之前的日期相关类（熟悉）"></a>Java8之前的日期相关类（熟悉）</h2><hr><h3 id="System类的概述"><a href="#System类的概述" class="headerlink" title="System类的概述"></a>System类的概述</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>java.lang.System类中提供了一些有用的类字段和方法。</li></ul><h4 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>static long currentTimeMillis()</td><td>返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差</td></tr></tbody></table><h3 id="Date类的概述"><a href="#Date类的概述" class="headerlink" title="Date类的概述"></a>Date类的概述</h3><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>java.util.Date类主要用于描述特定的瞬间，也就是年月日时分秒，可以精确到毫秒。</li></ul><h4 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>Date()</td><td>使用无参的方式构造对象，也就是当前系统时间</td></tr><tr><td>Date(long date)</td><td>根据参数指定毫秒数构造对象，  参数为距离1970年1月1日0时0分0秒的毫秒数</td></tr><tr><td>long getTime()</td><td>获取调用对象距离1970年1月1日0时0分0秒的毫秒数</td></tr><tr><td>void setTime(long time)</td><td>设置调用对象为距离基准时间time毫秒的时间点</td></tr></tbody></table><h3 id="SimpleDateFormat类的概述"><a href="#SimpleDateFormat类的概述" class="headerlink" title="SimpleDateFormat类的概述"></a>SimpleDateFormat类的概述</h3><h4 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>java.text.SimpleDateFormat类主要用于实现日期和文本之间的转换。</li></ul><h4 id="常用的方法-2"><a href="#常用的方法-2" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>SimpleDateFormat()</td><td>使用无参方式构造对象</td></tr><tr><td>SimpleDateFormat(String pattern)</td><td>根据参数指定的模式来构造对象，模式主要有: y-年  M-月  d-日 H-时  m-分  s-秒</td></tr><tr><td>ﬁnal String format(Date date)</td><td>用于将日期类型转换为文本类型</td></tr><tr><td>Date parse(String source)</td><td>用于将文本类型转换为日期类型</td></tr></tbody></table><h3 id="Calendar类的概述"><a href="#Calendar类的概述" class="headerlink" title="Calendar类的概述"></a>Calendar类的概述</h3><h4 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>java.util.Calender类主要用于描述特定的瞬间，取代Date类中的过时方法实现全球化。</li><li>该类是个抽象类，因此不能实例化对象，其具体子类针对不同国家的日历系统，其中应用最广泛的是GregorianCalendar（格里高利历），对应世界上绝大多数国家&#x2F;地区使用的标准日历系统。</li></ul><h4 id="常用的方法-3"><a href="#常用的方法-3" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>static Calendar getInstance()</td><td>用于获取Calendar类型的引用</td></tr><tr><td>void set(int year, int month, int date, int hourOfDay, int <br/>minute, int second)</td><td>用于设置年月日时分秒信息</td></tr><tr><td>Date getTime()</td><td>用于将Calendar类型转换为Date类型</td></tr><tr><td>void set(int ﬁeld, int value)</td><td>设置指定字段的数值</td></tr><tr><td>void add(int ﬁeld, int amount)</td><td>向指定字段增加数值</td></tr></tbody></table><h4 id="多态的使用场合"><a href="#多态的使用场合" class="headerlink" title="多态的使用场合"></a>多态的使用场合</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过方法的参数传递形成多态； </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Shape s)</span>&#123; </span><br><span class="line">     s.show();</span><br><span class="line">&#125;</span><br><span class="line">draw(<span class="keyword">new</span> <span class="title class_">Rect</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">//在方法体中直接使用多态的语法格式 </span></span><br><span class="line"><span class="type">Account</span> <span class="variable">acc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FixedAccount</span>(); </span><br><span class="line"><span class="comment">//通过方法的返回值类型形成多态 </span></span><br><span class="line">Calender <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(zone, aLocale); </span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Java8中的日期相关类（熟悉）"><a href="#Java8中的日期相关类（熟悉）" class="headerlink" title="Java8中的日期相关类（熟悉）"></a>Java8中的日期相关类（熟悉）</h2><hr><h3 id="Java8日期类的由来"><a href="#Java8日期类的由来" class="headerlink" title="Java8日期类的由来"></a>Java8日期类的由来</h3><p>JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：</p><ul><li>Date类中的年份是从1900开始的，而月份都从0开始。 </li><li>格式化只对Date类有用，对Calendar类则不能使用。 </li><li>非线程安全等。</li></ul><h3 id="Java8日期类的概述"><a href="#Java8日期类的概述" class="headerlink" title="Java8日期类的概述"></a>Java8日期类的概述</h3><ul><li>Java 8通过发布新的Date-Time API来进一步加强对  日期与时间的处理。</li><li>java.time包：该包日期&#x2F;时间API的基础包。</li><li>java.time.chrono包：该包提供对不同日历系统的访问。</li><li>java.time.format包：该包能够格式化和解析日期时间对象。</li><li>java.time.temporal包：该包包含底层框架和扩展特性。</li><li>java.time.zone包：该包支持不同时区以及相关规则的类。</li></ul><h3 id="LocalDate类的概述"><a href="#LocalDate类的概述" class="headerlink" title="LocalDate类的概述"></a>LocalDate类的概述</h3><h4 id="基本概念-5"><a href="#基本概念-5" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>java.time.LocalDate类主要用于描述年-月-日格式的日期信息，该类不表示时间和时区信息。</li></ul><h4 id="常用的方法-4"><a href="#常用的方法-4" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>static LocalDate now()</td><td>在默认时区中从系统时钟获取当前日期</td></tr></tbody></table><h3 id="LocalTime类的概述"><a href="#LocalTime类的概述" class="headerlink" title="LocalTime类的概述"></a>LocalTime类的概述</h3><h4 id="基本概念-6"><a href="#基本概念-6" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>java.time.LocalTime 类主要用于描述时间信息，可以描述时分秒以及纳秒。</li></ul><h4 id="常用的方法-5"><a href="#常用的方法-5" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>static LocalTime now()</td><td>从默认时区的系统时间中获取当前时间</td></tr><tr><td>static LocalTime now(ZoneId zone)</td><td>获取指定时区的当前时间</td></tr></tbody></table><h3 id="LocalDateTime类的概述"><a href="#LocalDateTime类的概述" class="headerlink" title="LocalDateTime类的概述"></a>LocalDateTime类的概述</h3><h4 id="基本概念-7"><a href="#基本概念-7" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>java.time.LocalDateTime类主要用于描述ISO-8601日历系统中没有时区的日期时间，如2007-12-<br>03T10:15:30。</li></ul><h4 id="常用的方法-6"><a href="#常用的方法-6" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>static LocalDateTime now()</td><td>从默认时区的系统时间中获取当前日期时间</td></tr><tr><td>static LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second)</td><td>根据参数指定的年月日时分秒信息来设置日期时间</td></tr><tr><td>int getYear()</td><td>获取年份字段的数值</td></tr><tr><td>int getMonthValue()</td><td>获取1到12之间的月份字段</td></tr><tr><td>int getDayOfMonth()</td><td>获取日期字段</td></tr><tr><td>int getHour()</td><td>获取小时数</td></tr><tr><td>int getMinute()</td><td>获取分钟数</td></tr><tr><td>int getSecond()</td><td>获取秒数</td></tr><tr><td>LocalDateTime withYear(int year)</td><td>设置为参数指定的年</td></tr><tr><td>LocalDateTime withMonth(int month)</td><td>设置为参数指定的月</td></tr><tr><td>LocalDateTime withDayOfMonth(int dayOfMonth)</td><td>设置为参数指定的日</td></tr><tr><td>LocalDateTime withHour(int hour)</td><td>设置为参数指定的时</td></tr><tr><td>LocalDateTime withMinute(int minute)</td><td>设置为参数指定的分</td></tr><tr><td>LocalDateTime withSecond(int second)</td><td>设置为参数指定的秒</td></tr><tr><td>LocalDateTime plusYears(long years)</td><td>加上参数指定的年</td></tr><tr><td>LocalDateTime plusMonths(long months)</td><td>加上参数指定的月</td></tr><tr><td>LocalDateTime plusDays(long days)</td><td>加上参数指定的日</td></tr><tr><td>LocalDateTime plusHours(long hours)</td><td>加上参数指定的时</td></tr><tr><td>LocalDateTime plusMinutes(long minutes)</td><td>加上参数指定的分</td></tr><tr><td>LocalDateTime plusSeconds(long seconds)</td><td>加上参数指定的秒</td></tr><tr><td>LocalDateTime minusYears(long years)</td><td>减去参数指定的年</td></tr><tr><td>LocalDateTime minusMonths(long months)</td><td>减去参数指定的月</td></tr><tr><td>LocalDateTime minusDays(long days)</td><td>减去参数指定的日</td></tr><tr><td>LocalDateTime minusHours(long hours)</td><td>减去参数指定的时</td></tr><tr><td>LocalDateTime minusMinutes(long minutes)</td><td>减去参数指定的分</td></tr><tr><td>LocalDateTime minusSeconds(long seconds)</td><td>减去参数指定的秒</td></tr></tbody></table><h3 id="Instant类的概述"><a href="#Instant类的概述" class="headerlink" title="Instant类的概述"></a>Instant类的概述</h3><h4 id="基本概念-8"><a href="#基本概念-8" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>java.time.Instant类主要用于描述瞬间的时间点信息。</li></ul><h4 id="常用的方法-7"><a href="#常用的方法-7" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>static Instant now()</td><td>从系统时钟上获取当前时间</td></tr><tr><td>OﬀsetDateTime atOﬀset(ZoneOﬀset oﬀset)</td><td>将此瞬间与偏移量组合以创建偏移日期时间</td></tr><tr><td>static Instant ofEpochMilli(long epochMilli)</td><td>根据参数指定的毫秒数来构造对象，参数为距离1970年1月1日0时0分0秒的毫秒数</td></tr><tr><td>long toEpochMilli()</td><td>获取距离1970年1月1日0时0分0秒的毫秒数</td></tr></tbody></table><h3 id="DateTimeFormatter类的概述"><a href="#DateTimeFormatter类的概述" class="headerlink" title="DateTimeFormatter类的概述"></a>DateTimeFormatter类的概述</h3><h4 id="基本概念-9"><a href="#基本概念-9" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>java.time.format.DateTimeFormatter类主要用于格式化和解析日期。</li></ul><h4 id="常用的方法-8"><a href="#常用的方法-8" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th>方法声明</th><th>功能介绍</th></tr></thead><tbody><tr><td>static DateTimeFormatter ofPattern(String pattern)</td><td>根据参数指定的模式来获取对象</td></tr><tr><td>String format(TemporalAccessor temporal)</td><td>将参数指定日期时间转换为字符串</td></tr><tr><td>TemporalAccessor parse(CharSequence text)</td><td>将参数指定字符串转换为日期时间</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类的概述和使用</title>
      <link href="/2017/05/26/Java%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/05/26/Java%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="常用的包（熟悉）"><a href="#常用的包（熟悉）" class="headerlink" title="常用的包（熟悉）"></a>常用的包（熟悉）</h2><hr><h3 id="包的名称和功能"><a href="#包的名称和功能" class="headerlink" title="包的名称和功能"></a>包的名称和功能</h3><ul><li>java.lang包 - 该包是Java语言的核心包，并且该包中的所有内容由Java虚拟机自动导入。<br> 如：System类、String类、…</li><li>java.util包 - 该包是Java语言的工具包，里面提供了大量工具类以及集合类等。 <br>如：Scanner类、Random类、List集合、…</li><li>java.io包   - 该包是Java语言中的输入输出包，里面提供了大量读写文件相关的类等。<br> 如：FileInputStream类、FileOutputStream类、…</li><li>java.net包  - 该包是Java语言中的网络包，里面提供了大量网络编程相关的类等。<br> 如：ServerSocket类、Socket类、…</li><li>java.sql 包  - 该包是Java语言中的数据包，里面提供了大量操作数据库的类和接口等。 <br>如：DriverManager类、Connection接口、…</li><li>Java程序员在编程时可以使用大量类库，因此Java编程时需要记的很多，对编程能力本身要求不是特别的高</li></ul><hr><h2 id="Object类的概述（重点"><a href="#Object类的概述（重点" class="headerlink" title="Object类的概述（重点)"></a>Object类的概述（重点)</h2><hr><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>java.lang.Object类是Java语言中类层次结构的根类，也就是说任何一个类都是该类的直接或者间<br>接子类。</li><li>如果定义一个Java类时没有使用extends关键字声明其父类，则其父类为 java.lang.Object 类。 </li><li>Object类定义了“对象”的基本行为, 被子类默认继承。</li></ul><hr><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><table><thead><tr><th align="left"><strong>方法声明</strong></th><th align="left"><strong>功能介绍</strong></th></tr></thead><tbody><tr><td align="left">Object()</td><td align="left">使用无参方式构造对象</td></tr><tr><td align="left">boolean equals(Object obj)</td><td align="left">用于判断调用对象是否与参数对象相等。该方法默认比较两个对象的地址是否相等，与 &#x3D;&#x3D; 运算符的结果一致 若希望比较两个对象的内容，则需要重写该方法。若该方法被重写后，则应该重写hashCode方法来保证结果的一致性。</td></tr><tr><td align="left">int hashCode()</td><td align="left">用于获取调用对象的哈希码值(内存地址的编号)。<br>若两个对象调用equals方法相等，则各自调用该方法的结果必须相同若两个调用对象equals方法不相等，则各自调用该方法的结果应该不相同。<br>为了使得该方法与equals方法保持一致，需要重写该方法。</td></tr><tr><td align="left">String toString()</td><td align="left">用于获取调用对象的字符串形式<br>该方法默认返回的字符串为：包名.类名@哈希码值的十六进制<br>为了返回更有意义的数据，需要重写该方法<br>使用print或println打印引用或字符串拼接引用都会自动调用该方法</td></tr><tr><td align="left">Class&amp;lt?&gt; getClass()</td><td align="left">用于返回调用对象执行时的Class实例，反射机制使用</td></tr></tbody></table><p>案例题目：</p><pre><code>编程实现Student类的封装，特征：学号(id)和姓名，要求提供打印所有特征的方法。编程实现StudentTest类，在main方法中使用有参方式构造两个Student类型的对象并打印特征。</code></pre><p>题目扩展:</p><pre><code>如何实现以姓名作为基准判断两个对象是否相等？以及以学号和姓名同时作为基准判断两个对象是否相等？</code></pre><hr><h2 id="包装类（熟悉）"><a href="#包装类（熟悉）" class="headerlink" title="包装类（熟悉）"></a>包装类（熟悉）</h2><hr><h3 id="包装类的概念"><a href="#包装类的概念" class="headerlink" title="包装类的概念"></a>包装类的概念</h3><ul><li>通常情况下基本数据类型的变量不是对象，为了满足万物皆对象的理念就需要对基本数据类型的变量进行打包封装处理变成对象，而负责将这些变量声明为成员变量进行对象化处理的相关类，叫做包装类。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(); </span><br><span class="line"><span class="type">int</span>  <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th align="left">包装类</th><th align="left">对应的基本类型</th></tr></thead><tbody><tr><td align="left">java.lang.Byte</td><td align="left">byte</td></tr><tr><td align="left">java.lang.Short</td><td align="left">short</td></tr><tr><td align="left">java.lang.Integer</td><td align="left">int</td></tr><tr><td align="left">java.lang.Long</td><td align="left">long</td></tr><tr><td align="left">java.lang.Float</td><td align="left">float</td></tr><tr><td align="left">java.lang.Double</td><td align="left">double</td></tr><tr><td align="left">java.lang.Boolean</td><td align="left">boolean</td></tr><tr><td align="left">java.lang.Character</td><td align="left">char</td></tr></tbody></table><hr><h2 id="Integer类的概述"><a href="#Integer类的概述" class="headerlink" title="Integer类的概述"></a>Integer类的概述</h2><hr><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>java.lang.Integer类内部包装了一个int类型的变量作为成员变量，主要用于实现对int类型的包装并提供int类型到String类之间的转换等方法。</p><h3 id="常用的常量"><a href="#常用的常量" class="headerlink" title="常用的常量"></a>常用的常量</h3><table><thead><tr><th align="left">常量类型和名称</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">public static ﬁnal int MAX_VALUE</td><td align="left">表示int类型可以描述的最大值，即2^31-1</td></tr><tr><td align="left">public static ﬁnal int MIN_VALUE</td><td align="left">表示int类型可以描述的最小值，即-2^31</td></tr><tr><td align="left">public static ﬁnal int SIZE</td><td align="left">表示int类型采用二进制补码形式的位数</td></tr><tr><td align="left">public static ﬁnal int BYTES</td><td align="left">表示int类型所占的字节个数</td></tr><tr><td align="left">public static ﬁnal Class TYPE</td><td align="left">表示int类型的Class实例</td></tr></tbody></table><h3 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h3><table><thead><tr><th align="left">方发声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">Integer(int value)</td><td align="left">根据参数指定的整数来构造对象（已过时）</td></tr><tr><td align="left">Integer(String s)</td><td align="left">根据参数指定的字符串来构造对象  （已过时）</td></tr><tr><td align="left">int intValue()</td><td align="left">获取调用对象中的整数值并返回</td></tr><tr><td align="left">static Integer valueOf(int i)</td><td align="left">根据参数指定整数值得到Integer类型对象</td></tr><tr><td align="left">boolean equals(Object obj)</td><td align="left">比较调用对象与参数指定的对象是否相等</td></tr><tr><td align="left">String toString()</td><td align="left">返回描述调用对象数值的字符串形式</td></tr><tr><td align="left">static int parseInt(String s)</td><td align="left">将字符串类型转换为int类型并返回</td></tr><tr><td align="left">static String toString(int i)</td><td align="left">获取参数指定整数的十进制字符串形式</td></tr><tr><td align="left">static String toBinaryString(int i)</td><td align="left">获取参数指定整数的二进制字符串形式</td></tr><tr><td align="left">static String toHexString(int i)</td><td align="left">获取参数指定整数的十六进制字符串形式</td></tr><tr><td align="left">static String toOctalString(int i)</td><td align="left">获取参数指定整数的八进制字符串形式</td></tr></tbody></table><h3 id="装箱和拆箱的概念"><a href="#装箱和拆箱的概念" class="headerlink" title="装箱和拆箱的概念"></a>装箱和拆箱的概念</h3><ul><li>在Java5发布之前使用包装类对象进行运算时，需要较为繁琐的“拆箱”和“装箱”操作；即运算前先将包装类对象拆分为基本类型数据，运算后再将结果封装成包装类对象。</li><li>从Java5开始增加了自动拆箱和自动装箱的功能。</li></ul><h3 id="自动装箱池"><a href="#自动装箱池" class="headerlink" title="自动装箱池"></a>自动装箱池</h3><ul><li>在Integer类的内部提供了自动装箱池技术，将-128到127之间的整数已经装箱完毕，当程序中使用该范围之间的整数时，无需装箱直接取用自动装箱池中的对象即可，从而提高效率。</li></ul><hr><h2 id="Double类的概述"><a href="#Double类的概述" class="headerlink" title="Double类的概述"></a>Double类的概述</h2><hr><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>java.lang.Double类型内部包装了一个double类型的变量作为成员变量，主要用于实现对double 类型的包装并提供double类型到String类之间的转换等方法。</li></ul><h3 id="常用的常量-1"><a href="#常用的常量-1" class="headerlink" title="常用的常量"></a>常用的常量</h3><table><thead><tr><th align="left">常量类型和名称</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">public static ﬁnal int SIZE</td><td align="left">表示double类型的二进制位数</td></tr><tr><td align="left">public static ﬁnal int BYTES</td><td align="left">public static ﬁnal int BYTES</td></tr><tr><td align="left">public static ﬁnal Class TYPE</td><td align="left">表示double类型的Class实例</td></tr></tbody></table><h3 id="常用的方法-2"><a href="#常用的方法-2" class="headerlink" title="常用的方法"></a>常用的方法</h3><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">Double(double value)</td><td align="left">根据参数指定的浮点数据来构造对象（已过时）</td></tr><tr><td align="left">Double(String s)</td><td align="left">根据参数指定的字符串来构造对象  （已过时）</td></tr><tr><td align="left">double doubleValue()</td><td align="left">获取调用对象中的浮点数据并返回</td></tr><tr><td align="left">static Double valueOf(double d)</td><td align="left">根据参数指定浮点数据得到Double类型对象</td></tr><tr><td align="left">boolean equals(Object obj)</td><td align="left">比较调用对象与参数指定的对象是否相等</td></tr><tr><td align="left">String toString()</td><td align="left">返回描述调用对象数值的字符串形式</td></tr><tr><td align="left">static double parseDouble(String s)</td><td align="left">将字符串类型转换为double类型并返回</td></tr><tr><td align="left">boolean isNaN()</td><td align="left">判断调用对象的数值是否为非数字</td></tr></tbody></table><p>扩展</p><ul><li>java.lang.Number类是个抽象类，是上述类的父类来描述所有类共有的成员。</li></ul><hr><h2 id="Boolean类的概述"><a href="#Boolean类的概述" class="headerlink" title="Boolean类的概述"></a>Boolean类的概述</h2><hr><h3 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>java.lang.Boolean类型内部包装了一个boolean类型的变量作为成员变量，主要用于实现对 boolean类型的包装并提供boolean类型到String类之间的转换等方法。</li></ul><h3 id="常用的常量-2"><a href="#常用的常量-2" class="headerlink" title="常用的常量"></a>常用的常量</h3><table><thead><tr><th align="left">常量类型和名称</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">public static ﬁnal Boolean FALSE</td><td align="left">对应基值为false的对象</td></tr><tr><td align="left">public static ﬁnal Boolean TRUE</td><td align="left">对应基值为true的对象</td></tr><tr><td align="left">public static ﬁnal Class TYPE</td><td align="left">表示boolean类型的Class实例</td></tr></tbody></table><h3 id="常用的方法-3"><a href="#常用的方法-3" class="headerlink" title="常用的方法"></a>常用的方法</h3><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">Boolean(boolean value)</td><td align="left">根据参数指定的布尔数值来构造对象（已过时）</td></tr><tr><td align="left">Boolean(String s)</td><td align="left">根据参数指定的字符串来构造对象  （已过时）</td></tr><tr><td align="left">boolean booleanValue()</td><td align="left">获取调用对象中的布尔数值并返回</td></tr><tr><td align="left">static Boolean valueOf(boolean b)</td><td align="left">根据参数指定布尔数值得到Boolean类型对象</td></tr><tr><td align="left">boolean equals(Object obj)</td><td align="left">比较调用对象与参数指定的对象是否相等</td></tr><tr><td align="left">static boolean parseBoolean(String s)</td><td align="left">将字符串类型转换为boolean类型并返回</td></tr></tbody></table><h2 id="Character类的概述"><a href="#Character类的概述" class="headerlink" title="Character类的概述"></a>Character类的概述</h2><hr><h3 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>java.lang.Character类型内部包装了一个char类型的变量作为成员变量，主要用于实现对char类型的包装并提供字符类别的判断和转换等方法。</li></ul><h3 id="常用的常量-3"><a href="#常用的常量-3" class="headerlink" title="常用的常量"></a>常用的常量</h3><table><thead><tr><th align="left">常量类型和名称</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">public static ﬁnal int SIZE</td><td align="left">表示char类型的二进制位数</td></tr><tr><td align="left">public static ﬁnal int BYTES</td><td align="left">表示char类型的字节个数</td></tr><tr><td align="left">public static ﬁnal Class TYPE</td><td align="left">public static ﬁnal Class TYPE</td></tr></tbody></table><h3 id="常用的方法-4"><a href="#常用的方法-4" class="headerlink" title="常用的方法"></a>常用的方法</h3><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">Character(char value)</td><td align="left">根据参数指定的字符数据来构造对象（已过时）</td></tr><tr><td align="left">char charValue()</td><td align="left">获取调用对象中的字符数据并返回</td></tr><tr><td align="left">static Character valueOf(char c)</td><td align="left">根据参数指定字符数据得到Character类型对象</td></tr><tr><td align="left">boolean equals(Object obj)</td><td align="left">比较调用对象与参数指定的对象是否相等</td></tr><tr><td align="left">String toString()</td><td align="left">返回描述调用对象数值的字符串形式</td></tr><tr><td align="left">static boolean isUpperCase(char ch)</td><td align="left">判断参数指定字符是否为大写字符</td></tr><tr><td align="left">static boolean isLowerCase(char ch)</td><td align="left">判断参数指定字符是否为小写字符</td></tr><tr><td align="left">static boolean isDigit(char ch)</td><td align="left">判断参数指定字符是否为数字字符</td></tr><tr><td align="left">static char toUpperCase(char ch)</td><td align="left">将参数指定的字符转换为大写字符</td></tr><tr><td align="left">static char toLowerCase(char ch)</td><td align="left">将参数指定的字符转换为小写字符</td></tr></tbody></table><h3 id="包装类（Wrapper）的使用总结"><a href="#包装类（Wrapper）的使用总结" class="headerlink" title="包装类（Wrapper）的使用总结"></a>包装类（Wrapper）的使用总结</h3><ul><li>基本数据类型转换为对应包装类的方式<br>调用包装类的构造方法或静态方法即可</li><li>获取包装类对象中基本数据类型变量数值的方式 <br>调用包装类中的xxxValue方法即可</li><li>字符串转换为基本数据类型的方式 <br>调用包装类中的parseXxx方法即可</li></ul><h2 id="数学处理类（熟悉）"><a href="#数学处理类（熟悉）" class="headerlink" title="数学处理类（熟悉）"></a>数学处理类（熟悉）</h2><hr><h3 id="Math类的概述"><a href="#Math类的概述" class="headerlink" title="Math类的概述"></a>Math类的概述</h3><h4 id="基本概念-5"><a href="#基本概念-5" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>java.lang.Math类主要用于提供执行数学运算的方法，如：对数，平方根。</li></ul><h4 id="常用的方法-5"><a href="#常用的方法-5" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">static int max(int a, int b)</td><td align="left">返回两个参数中的最大值</td></tr><tr><td align="left">static int min(int a, int b)</td><td align="left">返回两个参数中的最小值</td></tr><tr><td align="left">static double pow(double a, double b)</td><td align="left">返回第一个参数的幂</td></tr><tr><td align="left">static int abs(int a)</td><td align="left">返回参数指定数值的绝对值</td></tr><tr><td align="left">static long round(double a)</td><td align="left">返回参数四舍五入的结果</td></tr><tr><td align="left">static double sqrt(double a)</td><td align="left">返回参数的平方根</td></tr><tr><td align="left">static double random()</td><td align="left">返回0.0到1.0的随机数</td></tr></tbody></table><h3 id="BigDecimal类的概述"><a href="#BigDecimal类的概述" class="headerlink" title="BigDecimal类的概述"></a>BigDecimal类的概述</h3><h4 id="基本概念-6"><a href="#基本概念-6" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>由于ﬂoat类型和double类型在运算时可能会有误差，若希望实现精确运算则借助 java.math.BigDecimal类型加以描述。</li></ul><h4 id="常用的方法-6"><a href="#常用的方法-6" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">BigDecimal(String val)</td><td align="left">根据参数指定的字符串来构造对象</td></tr><tr><td align="left">BigDecimal add(BigDecimal augend)</td><td align="left">用于实现加法运算</td></tr><tr><td align="left">BigDecimal subtract(BigDecimal subtrahend)</td><td align="left">用于实现减法运算</td></tr><tr><td align="left">BigDecimal multiply(BigDecimal multiplicand)</td><td align="left">BigDecimal multiply(BigDecimal multiplicand)</td></tr><tr><td align="left">BigDecimal divide(BigDecimal divisor)</td><td align="left">用于实现除法运算</td></tr></tbody></table><h3 id="BigInteger类的概念"><a href="#BigInteger类的概念" class="headerlink" title="BigInteger类的概念"></a>BigInteger类的概念</h3><h4 id="基本概念-7"><a href="#基本概念-7" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>若希望表示比long类型范围还大的整数数据，则需要借助java.math.BigInteger类型描述。</li></ul><h4 id="常用的方法-7"><a href="#常用的方法-7" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">BigInteger(String val)</td><td align="left">根据参数指定的字符串来构造对象</td></tr><tr><td align="left">BigInteger add(BigInteger val)</td><td align="left">用于实现加法运算</td></tr><tr><td align="left">BigInteger subtract(BigInteger val)</td><td align="left">用于实现减法运算</td></tr><tr><td align="left">BigInteger multiply(BigInteger val)</td><td align="left">用于实现乘法运算</td></tr><tr><td align="left">BigInteger divide(BigInteger val)</td><td align="left">用于实现除法运算</td></tr><tr><td align="left">BigInteger remainder(BigInteger val)</td><td align="left">用于实现取余运算</td></tr><tr><td align="left">BigInteger[] divideAndRemainder(BigInteger val)</td><td align="left">用于实现取商和余数的运算</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类的概述和使用</title>
      <link href="/2017/05/26/String%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/05/26/String%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="String类的概念（重点）"><a href="#String类的概念（重点）" class="headerlink" title="String类的概念（重点）"></a>String类的概念（重点）</h2><hr><ul><li>java.lang.String类用于描述字符串，Java程序中所有的字符串字面值都可以使用该类的对象加描 述，如：”abc”。</li><li>该类由ﬁnal关键字修饰，表示该类不能被继承。</li><li>从jdk1.9开始该类的底层不使用char[]来存储数据，而是改成 byte[]加上编码标记，从而节约了一 些空间。</li><li>该类描述的字符串内容是个常量不可更改，因此可以被共享使用。 如：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> “abc”;   - 其中<span class="string">&quot;abc&quot;</span>这个字符串是个常量不可改变。</span><br><span class="line">str1 = “<span class="number">123</span>”;             - 将“<span class="number">123</span>”字符串的地址赋值给变量str1。 </span><br><span class="line">                          - 改变str1的指向并没有改变指向的内容</span><br></pre></td></tr></table></figure><h2 id="常量池的概念（原理）"><a href="#常量池的概念（原理）" class="headerlink" title="常量池的概念（原理）"></a>常量池的概念（原理）</h2><hr><ul><li>由于String类型描述的字符串内容是常量不可改变，因此Java虚拟机将首次出现的字符串放入常量 池中，若后续代码中出现了相同字符串内容则直接使用池中已有的字符串对象而无需申请内存及创建对象，从而提高了性能。</li></ul><h2 id="常用的构造方法（练熟、记住）"><a href="#常用的构造方法（练熟、记住）" class="headerlink" title="常用的构造方法（练熟、记住）"></a>常用的构造方法（练熟、记住）</h2><hr><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">String()</td><td align="left">使用无参方式构造对象得到空字符序列</td></tr><tr><td align="left">String(byte[] bytes, int oﬀset, int length)</td><td align="left">使用bytes数组中下标从oﬀset位置开始的length个字节来构造对象</td></tr><tr><td align="left">String(byte[] bytes)</td><td align="left">使用bytes数组中的所有内容构造对象</td></tr><tr><td align="left">String(char[] value, int oﬀset, int count)</td><td align="left">使用value数组中下标从oﬀset位置开始的count个字符来构造对象</td></tr><tr><td align="left">String(char[] value)</td><td align="left">使用value数组中的所有内容构造对象</td></tr><tr><td align="left">String(String original)</td><td align="left">根据参数指定的字符串内容来构造对象，新创建对象为参数对象的副本</td></tr></tbody></table><h2 id="常用的成员方法（练熟、记住）"><a href="#常用的成员方法（练熟、记住）" class="headerlink" title="常用的成员方法（练熟、记住）"></a>常用的成员方法（练熟、记住）</h2><hr><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">String toString()</td><td align="left">返回字符串本身</td></tr><tr><td align="left">byte[] getBytes()</td><td align="left">将当前字符串内容转换为byte数组并返回</td></tr><tr><td align="left">char[] toCharArray()</td><td align="left">用于将当前字符串内容转换为char数组并返回</td></tr></tbody></table><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">char charAt(int index)</td><td align="left">方法charAt用于返回字符串指定位置的字符。</td></tr><tr><td align="left">int length()</td><td align="left">返回字符串字符序列的长度</td></tr><tr><td align="left">boolean isEmpty()</td><td align="left">判断字符串是否为空</td></tr></tbody></table><ul><li>案例题目</li><li>判断字符串“上海自来水来自海上”是否为回文并打印，所谓回文是指一个字符序列无论从左向右读 还是从右向左读都是相同的句子。</li></ul><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">int compareTo(String anotherString)</td><td align="left">用于比较调用对象和参数对象的大小关系</td></tr><tr><td align="left">int compareToIgnoreCase(String str)</td><td align="left">不考虑大小写，也就是’a’和’A’是相等的关系</td></tr></tbody></table><ul><li>案例题目</li><li>编程实现字符串之间大小的比较并打印。</li></ul><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">String concat(String str)</td><td align="left">用于实现字符串的拼接</td></tr><tr><td align="left">boolean contains(CharSequence s)</td><td align="left">用于判断当前字符串是否包含参数指定的内容</td></tr><tr><td align="left">String toLowerCase()</td><td align="left">返回字符串的小写形式</td></tr><tr><td align="left">String toUpperCase()</td><td align="left">返回字符串的大写形式</td></tr><tr><td align="left">String trim()</td><td align="left">返回去掉前导和后继空白的字符串</td></tr><tr><td align="left">boolean startsWith(String preﬁx)</td><td align="left">判断字符串是否以参数字符串开头</td></tr><tr><td align="left">boolean startsWith(String preﬁx, int toﬀset)</td><td align="left">从指定位置开始是否以参数字符串开头</td></tr><tr><td align="left">boolean endsWith(String suﬃx)</td><td align="left">判断字符串是否以参数字符串结尾</td></tr></tbody></table><ul><li>案例题目</li><li>编程实现上述方法的使用。</li></ul><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">boolean equals(Object anObject)</td><td align="left">用于比较字符串内容是否相等并返回</td></tr><tr><td align="left">int hashCode()</td><td align="left">获取调用对象的哈希码值</td></tr><tr><td align="left">boolean equalsIgnoreCase(String anotherString)</td><td align="left">用于比较字符串内容是否相等并返回，不考虑大小写， <br/>如：’A’和’a’是相等</td></tr></tbody></table><ul><li>案例题目</li><li>提示用户从键盘输入用户名和密码信息，若输入”admin”和”123456”则提示“登录成功，欢迎使 用”，否则提示“用户名或密码错误，您还有n次机会”，若用户输入三次后依然错误则提示“账户已冻结，请联系客服人员！”</li></ul><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">int indexOf(int ch)</td><td align="left">用于返回当前字符串中参数ch指定的字符第一次出现的下标</td></tr><tr><td align="left">int indexOf(int ch, int fromIndex)</td><td align="left">用于从fromIndex位置开始查找ch指定的字符</td></tr><tr><td align="left">int indexOf(String str)</td><td align="left">在字符串中检索str返回其第一次出现的位置，若找不到返回-1</td></tr><tr><td align="left">int indexOf(String str, int fromIndex)</td><td align="left">表示从字符串的fromIndex位置开始检索str第一次出现 <br/>的位置</td></tr><tr><td align="left">int lastIndexOf(int ch)</td><td align="left">用于返回参数ch指定的字符最后一次出现的下标</td></tr><tr><td align="left">int lastIndexOf(int ch, int fromIndex)</td><td align="left">用于从fromIndex位置开始查找ch指定字符出现的下标</td></tr><tr><td align="left">int lastIndexOf(String str)</td><td align="left">返回str指定字符串最后一次出现的下标</td></tr><tr><td align="left">int lastIndexOf(String str, int fromIndex)</td><td align="left">用于从fromIndex位置开始反向搜索的第一次出现的下 <br/>标。</td></tr></tbody></table><ul><li>案例题目</li><li>编写通用的代码可以查询字符串”Good Good Study, Day Day Up!”中所有”Day”出现的索引位置并打印出来。</li></ul><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">String substring(int beginIndex, int endIndex)</td><td align="left">返回字符串中从下标beginIndex（包括）开始到 endIndex（不包括）结束的子字符串</td></tr><tr><td align="left">String substring(int beginIndex)</td><td align="left">返回字符串中从下标beginIndex（包括）开始到字符串结尾的子字符串</td></tr></tbody></table><ul><li>案例题目</li><li>提示用户从键盘输入一个字符串和一个字符，输出该字符(不含)后面的所有子字符串。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式的概述和使用</title>
      <link href="/2017/05/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/05/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="正则表达式的概念（了解）"><a href="#正则表达式的概念（了解）" class="headerlink" title="正则表达式的概念（了解）"></a>正则表达式的概念（了解）</h2><hr><ul><li>正则表达式本质就是一个“规则字符串”，可以用于对字符串数据的格式进行验证，以及匹配、查 找、替换等操作。该字符串通常使用^运算符作为开头标志，使用$运算符作为结尾标志，当然也可以省略。</li></ul><hr><h2 id="正则表达式的规则（了解）"><a href="#正则表达式的规则（了解）" class="headerlink" title="正则表达式的规则（了解）"></a>正则表达式的规则（了解）</h2><table><thead><tr><th align="left">正则表达式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">[abc]</td><td align="left">可以出现a、b、c中任意一个字符</td></tr><tr><td align="left">[^abc]</td><td align="left">可以出现任何字符，除了a、b、c的任意字符</td></tr><tr><td align="left">[a-z]</td><td align="left">可以出现a、b、c、……、z中的任意一个字符</td></tr><tr><td align="left">[a-zA-Z0-9]</td><td align="left">可以出现a<del>z、A</del>Z、0~9中任意一个字符</td></tr></tbody></table><table><thead><tr><th align="left">正则表达式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">.</td><td align="left">任意一个字符（通常不包含换行符）</td></tr><tr><td align="left">\d</td><td align="left">任意一个数字字符，相当于[0-9]</td></tr><tr><td align="left">\D</td><td align="left">任意一个非数字字符</td></tr><tr><td align="left">\s</td><td align="left">空白字符，相当于[\t\n\x0B\f\r]</td></tr><tr><td align="left">\S</td><td align="left">非空白字符</td></tr><tr><td align="left">\d</td><td align="left">任意一个单词字符，相当于[a-zA-Z_0-9]</td></tr><tr><td align="left">\W</td><td align="left">任意一个非单词字符</td></tr></tbody></table><table><thead><tr><th align="left">正则表达式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">X?</td><td align="left">表示X可以出现一次或一次也没有，也就是0 ~ 1次</td></tr><tr><td align="left">X*</td><td align="left">表示X可以出现零次或多次，也就是0 ~ n次</td></tr><tr><td align="left">X+</td><td align="left">表示X可以出现一次或多次，也就是1 ~ n次</td></tr><tr><td align="left">X{n}</td><td align="left">表示X可以出现恰好 n 次</td></tr><tr><td align="left">X{n，}</td><td align="left">表示X可以出现至少 n 次，也就是&gt;&#x3D;n次</td></tr><tr><td align="left">X{n，m}</td><td align="left">表示X可以出现至少 n 次，但是不超过 m 次，也就是&gt;&#x3D;n并且&lt;&#x3D;m次</td></tr></tbody></table><hr><h2 id="正则表达式相关的方法（熟悉）"><a href="#正则表达式相关的方法（熟悉）" class="headerlink" title="正则表达式相关的方法（熟悉）"></a>正则表达式相关的方法（熟悉）</h2><table><thead><tr><th align="left">方法名称</th><th align="left">方法说明</th></tr></thead><tbody><tr><td align="left">boolean matches(String regex)</td><td align="left">判断当前正在调用的字符串是否匹配参数指定的正则表达式规则</td></tr></tbody></table><ul><li>案例题目</li><li>使用正则表达式描述一下银行卡密码的规则：要求是由6位数字组成。 </li><li>使用正则表达式描述一下QQ号码的规则：要求是由非0开头的5~15位数组成。</li><li>使用正则表达式描述一下手机号码的规则：要求是由1开头，第二位数是3、4、5、7、8中的一位，总共11位。</li><li>描述身份证号码的规则：总共18位，6位数字代表地区，4位数字代表年，2位数字代表月，2位数字代表日期， 3位数字代表个人，最后一位可能数字也可能是X。</li></ul><table><thead><tr><th align="left">方法名称</th><th align="left">方法说明</th></tr></thead><tbody><tr><td align="left">String[] split(String regex)</td><td align="left">参数regex为正则表达式，以regex所表示的字符串为分隔符，将字符串拆分成字符串数组</td></tr><tr><td align="left">String replace(char oldChar, char newChar)</td><td align="left">使用参数newChar替换此字符串中出现的所有参数oldChar</td></tr><tr><td align="left">String replaceFirst(String regex, String replacement)</td><td align="left">替换此字符串匹配给定的正则表达式的第一个子字符串</td></tr><tr><td align="left">String replaceAll(String regex, String replacement)</td><td align="left">将字符串中匹配正则表达式regex的字符串替换成replacement</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
