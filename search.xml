<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/08/hello-world/"/>
      <url>/2023/08/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类的概述和使用</title>
      <link href="/2017/05/26/Java%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/05/26/Java%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="常用的包（熟悉）"><a href="#常用的包（熟悉）" class="headerlink" title="常用的包（熟悉）"></a>常用的包（熟悉）</h2><hr><h3 id="包的名称和功能"><a href="#包的名称和功能" class="headerlink" title="包的名称和功能"></a>包的名称和功能</h3><ul><li>java.lang包 - 该包是Java语言的核心包，并且该包中的所有内容由Java虚拟机自动导入。<br> 如：System类、String类、…</li><li>java.util包 - 该包是Java语言的工具包，里面提供了大量工具类以及集合类等。 <br>如：Scanner类、Random类、List集合、…</li><li>java.io包   - 该包是Java语言中的输入输出包，里面提供了大量读写文件相关的类等。<br> 如：FileInputStream类、FileOutputStream类、…</li><li>java.net包  - 该包是Java语言中的网络包，里面提供了大量网络编程相关的类等。<br> 如：ServerSocket类、Socket类、…</li><li>java.sql 包  - 该包是Java语言中的数据包，里面提供了大量操作数据库的类和接口等。 <br>如：DriverManager类、Connection接口、…</li><li>Java程序员在编程时可以使用大量类库，因此Java编程时需要记的很多，对编程能力本身要求不是特别的高</li></ul><hr><h2 id="Object类的概述（重点"><a href="#Object类的概述（重点" class="headerlink" title="Object类的概述（重点)"></a>Object类的概述（重点)</h2><hr><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>java.lang.Object类是Java语言中类层次结构的根类，也就是说任何一个类都是该类的直接或者间<br>接子类。</li><li>如果定义一个Java类时没有使用extends关键字声明其父类，则其父类为 java.lang.Object 类。 </li><li>Object类定义了“对象”的基本行为, 被子类默认继承。</li></ul><hr><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><table><thead><tr><th align="left"><strong>方法声明</strong></th><th align="left"><strong>功能介绍</strong></th></tr></thead><tbody><tr><td align="left">Object()</td><td align="left">使用无参方式构造对象</td></tr><tr><td align="left">boolean equals(Object obj)</td><td align="left">用于判断调用对象是否与参数对象相等。该方法默认比较两个对象的地址是否相等，与 &#x3D;&#x3D; 运算符的结果一致 若希望比较两个对象的内容，则需要重写该方法。若该方法被重写后，则应该重写hashCode方法来保证结果的一致性。</td></tr><tr><td align="left">int hashCode()</td><td align="left">用于获取调用对象的哈希码值(内存地址的编号)。<br>若两个对象调用equals方法相等，则各自调用该方法的结果必须相同若两个调用对象equals方法不相等，则各自调用该方法的结果应该不相同。<br>为了使得该方法与equals方法保持一致，需要重写该方法。</td></tr><tr><td align="left">String toString()</td><td align="left">用于获取调用对象的字符串形式<br>该方法默认返回的字符串为：包名.类名@哈希码值的十六进制<br>为了返回更有意义的数据，需要重写该方法<br>使用print或println打印引用或字符串拼接引用都会自动调用该方法</td></tr><tr><td align="left">Class&amp;lt?&gt; getClass()</td><td align="left">用于返回调用对象执行时的Class实例，反射机制使用</td></tr></tbody></table><p>案例题目：</p><pre><code>编程实现Student类的封装，特征：学号(id)和姓名，要求提供打印所有特征的方法。编程实现StudentTest类，在main方法中使用有参方式构造两个Student类型的对象并打印特征。</code></pre><p>题目扩展:</p><pre><code>如何实现以姓名作为基准判断两个对象是否相等？以及以学号和姓名同时作为基准判断两个对象是否相等？</code></pre><hr><h2 id="包装类（熟悉）"><a href="#包装类（熟悉）" class="headerlink" title="包装类（熟悉）"></a>包装类（熟悉）</h2><hr><h3 id="包装类的概念"><a href="#包装类的概念" class="headerlink" title="包装类的概念"></a>包装类的概念</h3><ul><li>通常情况下基本数据类型的变量不是对象，为了满足万物皆对象的理念就需要对基本数据类型的变量进行打包封装处理变成对象，而负责将这些变量声明为成员变量进行对象化处理的相关类，叫做包装类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(); </span><br><span class="line"><span class="type">int</span>  <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><table><thead><tr><th align="left">包装类</th><th align="left">对应的基本类型</th></tr></thead><tbody><tr><td align="left">java.lang.Byte</td><td align="left">byte</td></tr><tr><td align="left">java.lang.Short</td><td align="left">short</td></tr><tr><td align="left">java.lang.Integer</td><td align="left">int</td></tr><tr><td align="left">java.lang.Long</td><td align="left">long</td></tr><tr><td align="left">java.lang.Float</td><td align="left">float</td></tr><tr><td align="left">java.lang.Double</td><td align="left">double</td></tr><tr><td align="left">java.lang.Boolean</td><td align="left">boolean</td></tr><tr><td align="left">java.lang.Character</td><td align="left">char</td></tr></tbody></table><hr><h2 id="Integer类的概述"><a href="#Integer类的概述" class="headerlink" title="Integer类的概述"></a>Integer类的概述</h2><hr><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>java.lang.Integer类内部包装了一个int类型的变量作为成员变量，主要用于实现对int类型的包装并提供int类型到String类之间的转换等方法。</p><h3 id="常用的常量"><a href="#常用的常量" class="headerlink" title="常用的常量"></a>常用的常量</h3><table><thead><tr><th align="left">常量类型和名称</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">public static ﬁnal int MAX_VALUE</td><td align="left">表示int类型可以描述的最大值，即2^31-1</td></tr><tr><td align="left">public static ﬁnal int MIN_VALUE</td><td align="left">表示int类型可以描述的最小值，即-2^31</td></tr><tr><td align="left">public static ﬁnal int SIZE</td><td align="left">表示int类型采用二进制补码形式的位数</td></tr><tr><td align="left">public static ﬁnal int BYTES</td><td align="left">表示int类型所占的字节个数</td></tr><tr><td align="left">public static ﬁnal Class TYPE</td><td align="left">表示int类型的Class实例</td></tr></tbody></table><h3 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h3><table><thead><tr><th align="left">方发声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">Integer(int value)</td><td align="left">根据参数指定的整数来构造对象（已过时）</td></tr><tr><td align="left">Integer(String s)</td><td align="left">根据参数指定的字符串来构造对象  （已过时）</td></tr><tr><td align="left">int intValue()</td><td align="left">获取调用对象中的整数值并返回</td></tr><tr><td align="left">static Integer valueOf(int i)</td><td align="left">根据参数指定整数值得到Integer类型对象</td></tr><tr><td align="left">boolean equals(Object obj)</td><td align="left">比较调用对象与参数指定的对象是否相等</td></tr><tr><td align="left">String toString()</td><td align="left">返回描述调用对象数值的字符串形式</td></tr><tr><td align="left">static int parseInt(String s)</td><td align="left">将字符串类型转换为int类型并返回</td></tr><tr><td align="left">static String toString(int i)</td><td align="left">获取参数指定整数的十进制字符串形式</td></tr><tr><td align="left">static String toBinaryString(int i)</td><td align="left">获取参数指定整数的二进制字符串形式</td></tr><tr><td align="left">static String toHexString(int i)</td><td align="left">获取参数指定整数的十六进制字符串形式</td></tr><tr><td align="left">static String toOctalString(int i)</td><td align="left">获取参数指定整数的八进制字符串形式</td></tr></tbody></table><h3 id="装箱和拆箱的概念"><a href="#装箱和拆箱的概念" class="headerlink" title="装箱和拆箱的概念"></a>装箱和拆箱的概念</h3><ul><li>在Java5发布之前使用包装类对象进行运算时，需要较为繁琐的“拆箱”和“装箱”操作；即运算前先将包装类对象拆分为基本类型数据，运算后再将结果封装成包装类对象。</li><li>从Java5开始增加了自动拆箱和自动装箱的功能。</li></ul><h3 id="自动装箱池"><a href="#自动装箱池" class="headerlink" title="自动装箱池"></a>自动装箱池</h3><ul><li>在Integer类的内部提供了自动装箱池技术，将-128到127之间的整数已经装箱完毕，当程序中使用该范围之间的整数时，无需装箱直接取用自动装箱池中的对象即可，从而提高效率。</li></ul><hr><h2 id="Double类的概述"><a href="#Double类的概述" class="headerlink" title="Double类的概述"></a>Double类的概述</h2><hr><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>java.lang.Double类型内部包装了一个double类型的变量作为成员变量，主要用于实现对double 类型的包装并提供double类型到String类之间的转换等方法。</li></ul><h3 id="常用的常量-1"><a href="#常用的常量-1" class="headerlink" title="常用的常量"></a>常用的常量</h3><table><thead><tr><th align="left">常量类型和名称</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">public static ﬁnal int SIZE</td><td align="left">表示double类型的二进制位数</td></tr><tr><td align="left">public static ﬁnal int BYTES</td><td align="left">public static ﬁnal int BYTES</td></tr><tr><td align="left">public static ﬁnal Class TYPE</td><td align="left">表示double类型的Class实例</td></tr></tbody></table><h3 id="常用的方法-2"><a href="#常用的方法-2" class="headerlink" title="常用的方法"></a>常用的方法</h3><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">Double(double value)</td><td align="left">根据参数指定的浮点数据来构造对象（已过时）</td></tr><tr><td align="left">Double(String s)</td><td align="left">根据参数指定的字符串来构造对象  （已过时）</td></tr><tr><td align="left">double doubleValue()</td><td align="left">获取调用对象中的浮点数据并返回</td></tr><tr><td align="left">static Double valueOf(double d)</td><td align="left">根据参数指定浮点数据得到Double类型对象</td></tr><tr><td align="left">boolean equals(Object obj)</td><td align="left">比较调用对象与参数指定的对象是否相等</td></tr><tr><td align="left">String toString()</td><td align="left">返回描述调用对象数值的字符串形式</td></tr><tr><td align="left">static double parseDouble(String s)</td><td align="left">将字符串类型转换为double类型并返回</td></tr><tr><td align="left">boolean isNaN()</td><td align="left">判断调用对象的数值是否为非数字</td></tr></tbody></table><p>扩展</p><ul><li>java.lang.Number类是个抽象类，是上述类的父类来描述所有类共有的成员。</li></ul><hr><h2 id="Boolean类的概述"><a href="#Boolean类的概述" class="headerlink" title="Boolean类的概述"></a>Boolean类的概述</h2><hr><h3 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>java.lang.Boolean类型内部包装了一个boolean类型的变量作为成员变量，主要用于实现对 boolean类型的包装并提供boolean类型到String类之间的转换等方法。</li></ul><h3 id="常用的常量-2"><a href="#常用的常量-2" class="headerlink" title="常用的常量"></a>常用的常量</h3><table><thead><tr><th align="left">常量类型和名称</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">public static ﬁnal Boolean FALSE</td><td align="left">对应基值为false的对象</td></tr><tr><td align="left">public static ﬁnal Boolean TRUE</td><td align="left">对应基值为true的对象</td></tr><tr><td align="left">public static ﬁnal Class TYPE</td><td align="left">表示boolean类型的Class实例</td></tr></tbody></table><h3 id="常用的方法-3"><a href="#常用的方法-3" class="headerlink" title="常用的方法"></a>常用的方法</h3><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">Boolean(boolean value)</td><td align="left">根据参数指定的布尔数值来构造对象（已过时）</td></tr><tr><td align="left">Boolean(String s)</td><td align="left">根据参数指定的字符串来构造对象  （已过时）</td></tr><tr><td align="left">boolean booleanValue()</td><td align="left">获取调用对象中的布尔数值并返回</td></tr><tr><td align="left">static Boolean valueOf(boolean b)</td><td align="left">根据参数指定布尔数值得到Boolean类型对象</td></tr><tr><td align="left">boolean equals(Object obj)</td><td align="left">比较调用对象与参数指定的对象是否相等</td></tr><tr><td align="left">static boolean parseBoolean(String s)</td><td align="left">将字符串类型转换为boolean类型并返回</td></tr></tbody></table><h2 id="Character类的概述"><a href="#Character类的概述" class="headerlink" title="Character类的概述"></a>Character类的概述</h2><hr><h3 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>java.lang.Character类型内部包装了一个char类型的变量作为成员变量，主要用于实现对char类型的包装并提供字符类别的判断和转换等方法。</li></ul><h3 id="常用的常量-3"><a href="#常用的常量-3" class="headerlink" title="常用的常量"></a>常用的常量</h3><table><thead><tr><th align="left">常量类型和名称</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">public static ﬁnal int SIZE</td><td align="left">表示char类型的二进制位数</td></tr><tr><td align="left">public static ﬁnal int BYTES</td><td align="left">表示char类型的字节个数</td></tr><tr><td align="left">public static ﬁnal Class TYPE</td><td align="left">public static ﬁnal Class TYPE</td></tr></tbody></table><h3 id="常用的方法-4"><a href="#常用的方法-4" class="headerlink" title="常用的方法"></a>常用的方法</h3><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">Character(char value)</td><td align="left">根据参数指定的字符数据来构造对象（已过时）</td></tr><tr><td align="left">char charValue()</td><td align="left">获取调用对象中的字符数据并返回</td></tr><tr><td align="left">static Character valueOf(char c)</td><td align="left">根据参数指定字符数据得到Character类型对象</td></tr><tr><td align="left">boolean equals(Object obj)</td><td align="left">比较调用对象与参数指定的对象是否相等</td></tr><tr><td align="left">String toString()</td><td align="left">返回描述调用对象数值的字符串形式</td></tr><tr><td align="left">static boolean isUpperCase(char ch)</td><td align="left">判断参数指定字符是否为大写字符</td></tr><tr><td align="left">static boolean isLowerCase(char ch)</td><td align="left">判断参数指定字符是否为小写字符</td></tr><tr><td align="left">static boolean isDigit(char ch)</td><td align="left">判断参数指定字符是否为数字字符</td></tr><tr><td align="left">static char toUpperCase(char ch)</td><td align="left">将参数指定的字符转换为大写字符</td></tr><tr><td align="left">static char toLowerCase(char ch)</td><td align="left">将参数指定的字符转换为小写字符</td></tr></tbody></table><h3 id="包装类（Wrapper）的使用总结"><a href="#包装类（Wrapper）的使用总结" class="headerlink" title="包装类（Wrapper）的使用总结"></a>包装类（Wrapper）的使用总结</h3><ul><li>基本数据类型转换为对应包装类的方式<br>调用包装类的构造方法或静态方法即可</li><li>获取包装类对象中基本数据类型变量数值的方式 <br>调用包装类中的xxxValue方法即可</li><li>字符串转换为基本数据类型的方式 <br>调用包装类中的parseXxx方法即可</li></ul><h2 id="数学处理类（熟悉）"><a href="#数学处理类（熟悉）" class="headerlink" title="数学处理类（熟悉）"></a>数学处理类（熟悉）</h2><hr><h3 id="Math类的概述"><a href="#Math类的概述" class="headerlink" title="Math类的概述"></a>Math类的概述</h3><h4 id="基本概念-5"><a href="#基本概念-5" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>java.lang.Math类主要用于提供执行数学运算的方法，如：对数，平方根。</li></ul><h4 id="常用的方法-5"><a href="#常用的方法-5" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">static int max(int a, int b)</td><td align="left">返回两个参数中的最大值</td></tr><tr><td align="left">static int min(int a, int b)</td><td align="left">返回两个参数中的最小值</td></tr><tr><td align="left">static double pow(double a, double b)</td><td align="left">返回第一个参数的幂</td></tr><tr><td align="left">static int abs(int a)</td><td align="left">返回参数指定数值的绝对值</td></tr><tr><td align="left">static long round(double a)</td><td align="left">返回参数四舍五入的结果</td></tr><tr><td align="left">static double sqrt(double a)</td><td align="left">返回参数的平方根</td></tr><tr><td align="left">static double random()</td><td align="left">返回0.0到1.0的随机数</td></tr></tbody></table><h3 id="BigDecimal类的概述"><a href="#BigDecimal类的概述" class="headerlink" title="BigDecimal类的概述"></a>BigDecimal类的概述</h3><h4 id="基本概念-6"><a href="#基本概念-6" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>由于ﬂoat类型和double类型在运算时可能会有误差，若希望实现精确运算则借助 java.math.BigDecimal类型加以描述。</li></ul><h4 id="常用的方法-6"><a href="#常用的方法-6" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">BigDecimal(String val)</td><td align="left">根据参数指定的字符串来构造对象</td></tr><tr><td align="left">BigDecimal add(BigDecimal augend)</td><td align="left">用于实现加法运算</td></tr><tr><td align="left">BigDecimal subtract(BigDecimal subtrahend)</td><td align="left">用于实现减法运算</td></tr><tr><td align="left">BigDecimal multiply(BigDecimal multiplicand)</td><td align="left">BigDecimal multiply(BigDecimal multiplicand)</td></tr><tr><td align="left">BigDecimal divide(BigDecimal divisor)</td><td align="left">用于实现除法运算</td></tr></tbody></table><h3 id="BigInteger类的概念"><a href="#BigInteger类的概念" class="headerlink" title="BigInteger类的概念"></a>BigInteger类的概念</h3><h4 id="基本概念-7"><a href="#基本概念-7" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>若希望表示比long类型范围还大的整数数据，则需要借助java.math.BigInteger类型描述。</li></ul><h4 id="常用的方法-7"><a href="#常用的方法-7" class="headerlink" title="常用的方法"></a>常用的方法</h4><table><thead><tr><th align="left">方法声明</th><th align="left">功能介绍</th></tr></thead><tbody><tr><td align="left">BigInteger(String val)</td><td align="left">根据参数指定的字符串来构造对象</td></tr><tr><td align="left">BigInteger add(BigInteger val)</td><td align="left">用于实现加法运算</td></tr><tr><td align="left">BigInteger subtract(BigInteger val)</td><td align="left">用于实现减法运算</td></tr><tr><td align="left">BigInteger multiply(BigInteger val)</td><td align="left">用于实现乘法运算</td></tr><tr><td align="left">BigInteger divide(BigInteger val)</td><td align="left">用于实现除法运算</td></tr><tr><td align="left">BigInteger remainder(BigInteger val)</td><td align="left">用于实现取余运算</td></tr><tr><td align="left">BigInteger[] divideAndRemainder(BigInteger val)</td><td align="left">用于实现取商和余数的运算</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
